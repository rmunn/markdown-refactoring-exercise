## First impressions

That's even uglier than the Ledger.fs code was! I'm glad there are unit tests,
because if I had to follow the logic of the code without unit tests to tell me
what it's supposed to do, it would take me a couple of hours to work it out.

My plan is to create an AST to represent a Markdown file, then write a separate
function to format that AST as HTML. We'll see what the best way of parsing the
original Markdown file is: either predicate functions or active patterns might
work well. I'm going to try active patterns, though, because they usually end
up looking cleaner than an `if pred1 then ... elif pred2 then ... else` block.

## Step 0

Before we do ANYTHING else to this file, let's fix its indentation. The entire
`parse` function is indented by 3 spaces rather than 4, although internally it's
indented by 4 spaces. This means that when I hit Tab in VS Code, I get just one
space of indentation from the previous line. But if I hit Tab again, I'm going
to get *five* spaces. We'll fix this by simply adding a space to every line. In
order to make the Git diffs of my next steps readable, I'm going to make this
whitespace change as a separate commit.

## Step 1

I've gotten ahead of myself in my planning. Before creating an AST, I need to be
able to parse Markdown correctly. Let's start with a simple one: headers. If a
line starts with anywhere from one to six `#` characters, it's a header. The
number of `#` characters is the level of the header, from `<h1>` to `<h6>`.

## Step 2

I thought list items would be simple, but I had to also match and convert bold,
italics, and paragraphs in order to convert list items correctly. So this step
is slightly bigger than I'd planned. But the functions for converting italic and
bold should come in handy in the next step.

## Step 3

And now paragraphs with bold and italic inside them also convert correctly, and
the `parse` function looks good. However, we're far from done. The first problem
that still remains is that there's a lot of code duplication. I wrote each of
the convertFoo functions completely independently from each other, so that I'd
be worrying only about making them work just like the original code did. But now
that they're all written, there's a lot of common functionality we can extract.
So the next step is going to be extracting some of that common functionality
into its own function or functions, to DRY out this code a bit.
