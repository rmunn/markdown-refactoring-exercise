## First impressions

That's even uglier than the Ledger.fs code was! I'm glad there are unit tests,
because if I had to follow the logic of the code without unit tests to tell me
what it's supposed to do, it would take me a couple of hours to work it out.

My plan is to create an AST to represent a Markdown file, then write a separate
function to format that AST as HTML. We'll see what the best way of parsing the
original Markdown file is: either predicate functions or active patterns might
work well. I'm going to try active patterns, though, because they usually end
up looking cleaner than an `if pred1 then ... elif pred2 then ... else` block.

## Step 0

Before we do ANYTHING else to this file, let's fix its indentation. The entire
`parse` function is indented by 3 spaces rather than 4, although internally it's
indented by 4 spaces. This means that when I hit Tab in VS Code, I get just one
space of indentation from the previous line. But if I hit Tab again, I'm going
to get *five* spaces. We'll fix this by simply adding a space to every line. In
order to make the Git diffs of my next steps readable, I'm going to make this
whitespace change as a separate commit.

## Step 1

I've gotten ahead of myself in my planning. Before creating an AST, I need to be
able to parse Markdown correctly. Let's start with a simple one: headers. If a
line starts with anywhere from one to six `#` characters, it's a header. The
number of `#` characters is the level of the header, from `<h1>` to `<h6>`.

## Step 2

I thought list items would be simple, but I had to also match and convert bold,
italics, and paragraphs in order to convert list items correctly. So this step
is slightly bigger than I'd planned. But the functions for converting italic and
bold should come in handy in the next step.

## Step 3

And now paragraphs with bold and italic inside them also convert correctly, and
the `parse` function looks good. However, we're far from done. The first problem
that still remains is that there's a lot of code duplication. I wrote each of
the convertFoo functions completely independently from each other, so that I'd
be worrying only about making them work just like the original code did. But now
that they're all written, there's a lot of common functionality we can extract.
So the next step is going to be extracting some of that common functionality
into its own function or functions, to DRY out this code a bit.

## Step 4

These next few steps are going to be a lot shorter than the previous steps: now
that I have the main function refactored, I can make more incremental changes.
(Refactoring the main function required implementing whole subsystems at once so
that the tests continued to pass). For this step, I've added an `insideTag`
function to DRY out all those repeated `sprintf "<tag>%s</tag>"` calls.

## Step 5

This time I eliminated one of the two major code duplications around bold and
italic tags. There's no reason to have two code paths whose only difference is
whether you're looking for a pair of `__` strings or a pair of `_` strings, and
which HTML tag you assign to that Markdown span.

There's still one code duplication which I've left for the next step: the fact
that I have two checks, one for "is this entire line bold?" and one for "does
this line contain a bold span?". The first is a special case of the second.

## Step 6

And now the other duplication of bold & italic code is gone. The code to test if
the entire line was bold has been removed and replaced by the span-testing code.
This doesn't actually have precisely the same semantics as the code it's
replacing: for example, if a list item looked like `"* This has _italics_"`, the
old code would have wrapped that in a `<p>` tag, while the new code wouldn't.
But going by tests-as-spec, there's nothing to specify what the correct way to
handle that list item would be. Should it have a `<p>` tag? Should it not? The
tests don't give us a clue. So I've gone with the semantics of "If there is any
bold or italics *anywhere* in the list item, do not wrap it in a <p> tag" for
this particular refactoring step. That's not how it works in *real* Markdown, of
course, but then, this *isn't* real Markdown, just a tiny subset thereof. (For
example, in real Markdown, headers may contain bold and italics markup, but the
original, ugly Markdown code didn't parse header contents for inline markup tags
like bold or italics).

And besides, if in the future the requirements were to change so that `"* This
has _italics_"` should now be wrapped in a `<p>` tag... well, once I've finished
refactoring the code here, it should be easy to change it to adjust to new spec
requirements. That's the point of F# -- that your code is simple, easy to read,
and easy to adjust to changing requirements.

## Step 7

Now we finally have the infrastructure in place to refactor the rest of `parse`,
specifically its ugly build-up-a-mutable-string process. The complicated part is
the fact that list items need to be wrapped in an HTML `<ul>` tag. In mutable
style, this was pretty straightforward, but we needed a functional style. What I
ended up doing was writing a generic `List.chunkBy` function, similar to the
existing `List.chunkBySize` but that chunks based on a key function: every time
the key function's result *changes*, you start a new chunk. Then I tagged each
result with a bool to say whether it's a list item, chunked based on that bool,
and put `<ul>` and `</ul>` at the start and end of chunks of list items. The
result is a nice *functional* definition of `parse` as steps in a pipeline.

This code is finally starting to look nice, and if I was pressed for time I
might call this good enough and move on to some other part of the project. But I
think there are more refactoring opportunities here: for example, we have a lot
of functions that follow a common pattern. There's `isFoo`, `stripFooMarkdown`,
and `convertFoo`. This feels like a place where active patterns are the right
answer: an active pattern can combine `isFoo` and `stripFooMarkdown`, and its
corresponding code on the right side of the `match` could be `convertFoo`. So
our next refactoring step will convert this code to use active patterns.

## Step 8

But before we refactor to active patterns, let's simplify the list-item-wrapping
code from the previous step. I realized that there's no real need for the tuple
code that I set up in step 7. It's simpler to let the key function of `chunkBy`
be the "is this a list item?" predicate (which is simple enough to write). This
removes one step of the `parse` pipeline, and makes a couple of other steps a
lot easier to read and understand -- and "easier to read" is a big win.
